# basic church defns
0 := fn f => fn a => a;
succ := fn n => fn f => fn a => f (n f a);

# booleans
true := fn t => fn e => t;
false := fn t => fn e => e;

# pairs
pair := fn l => fn r => fn s => s l r;
first := fn p => p true;
second := fn p => p false;

# succ
# cache the previous result in second p, return it at the end
t := fn p => pair ( succ ( first p )) ( first p );
pred := fn n => second ( n t (pair 0 0) );

# numbers for testing
1 := succ 0;
2 := succ 1;
3 := succ 2;
4 := succ 3;

# main
pred 4
